---
# Hilfsfunktion zum auslesen lokal gespeicherter Secrets auf dem Server 
# Die Secrets sind aus dem Server jeweils in einer Datei gespeichert 
# Zum Auslesen wird die Datei über Slurp geladen und in einer Variable entsprechend dem 
# Dateinamen registriert.
# Falls die Datei noch nicht existiert wird das Secret entsprechend der vorgegebenen 
# Länge initialisiert 
# 
# Beispiel: (Auslesen von Passörtern aus /srv/xyz/secret_pw, registrierung als Variable secret_pw, erzeugung mit 24 Zeichen falls nicht vorhanden)
# 
# - include: ../functions/get_secret.yml
#   with_items:
#     - { path: /srv/xyz/secret_pw,  type: create, length: 24 } # erzeugt ein Secret mit 24 Zeichen länge
#     - { path: /srv/xyz/secret2_pw, type: create, length: 12 } # erzeugt ein Secret mit 12 Zeichen länge 
#     - { path: /srv/xyz/secret2_pw, type: prompt }             # der Benutzer wird nach dem Secret gefragt, falls es nicht existiert   
#     - { path: /srv/xyz/wg0_key, type: wireguard }             # erzeugt einen Wireguard private Key, der public Key wird ineiner Datei mit der zusätzlichen Endung ".pub" gespeichert  


# Check, ob die Secret-Datei bereits existiert 

- name: "{{ item.path | basename }} (check directory)"
  file: 
    path: "{{ item.path | dirname }}"
    state: "directory"

- name: "{{ item.path | basename }} (check file)"
  stat:
    path: "{{ item.path }}" 
  register: filestat 


# Secret erzeugen für type = create 
# see https://docs.ansible.com/ansible/latest/collections/ansible/builtin/password_lookup.html

- name: "{{ item.path | basename }} (create: length = {{ item.length }})"
  set_fact: 
    generated_secret: "{{ lookup('ansible.builtin.password', '/dev/null', chars=['ascii_letters', 'digits', '%=?!%/*#:;-_()[]' ], length=item.length) }}" 
  when: filestat.stat.exists == False and item.type == 'create'

- name: "{{ item.path | basename }} (prompt: write file)"
  copy: 
    content: "{{ generated_secret }}" 
    dest: "{{ item.path }}"
  when: filestat.stat.exists == False and item.type == 'create'


# Secret erzeugen für type = prompt 

- name: "{{ item.path | basename }} (prompt: user input)"
  pause: 
    prompt: "Enter value for Secret '{{ item.path | basename }}'"
    echo: yes
  register: prompt 
  when: filestat.stat.exists == False and item.type == 'prompt'

- name: "{{ item.path | basename }} (prompt: write file)"
  copy: 
    content: "{{ prompt.user_input }}" 
    dest: "{{ item.path }}"
  when: filestat.stat.exists == False and item.type == 'prompt'


# Secret erzeugen für type = wireguard 

- name: "{{ item.path | basename }} (wireguard: install wireguard-tools)" 
  apt:
    pkg: wireguard-tools
    update_cache: no
    state: present
  when: filestat.stat.exists == False and item.type == 'wireguard'

- name: "{{ item.path | basename }} (wireguard: generate keys)"
  shell: "wg genkey | tee {{ item.path }} | wg pubkey > {{ item.path }}.pub" 
  when: filestat.stat.exists == False and item.type == 'wireguard'


# Secret aus der Datei auslesen 

- name: "{{ item.path | basename }} (permissions)"
  file: 
    path: "{{ item.path }}"
    state: file
    owner: root
    group: root
    mode: '0640'

- name: "{{ item.path | basename }} (slurp)"
  slurp: src={{ item.path }}
  register: secretfile

- name: "{{ item.path | basename }} (decode)"
  set_fact: 
    "{{ item.path | basename }}": "{{ secretfile.content | b64decode | regex_replace('\\s', '') }}" 

